 Anti-Grain Geometry is designed as a set of loosely coupled
algorithms and class templates united with a common idea,
so that all the components can be easily combined. Also,
the template based design allows you to replace any part of
the library without the necessity to modify a single byte in
the existing code.
AGG is designed keeping in mind extensibility and flexibility.
Basically I just wanted to create a toolkit that would allow me
(and anyone else) to add new fancy algorithms very easily.
AGG does not dictate you any style of its use, you are free to
use any part of it. However, AGG is often associated with a tool
for rendering images in memory. That is not quite true, but it can
be a good starting point in studying. The tutorials describe the
use of AGG starting from the low level functionality that deals with
frame buffers and pixels. Then you will gradually understand how to
abstract different parts of the library and how to use them separately.
Remember, the raster picture is often not the only thing you want to
obtain, you will probably want to print your graphics with highest
possible quality and in this case you can easily combine the "vectorial"
part of the library with some API like Windows GDI, having a common
external interface. If that API can render multi-polygons with non-zero
and even-odd filling rules it's all you need to incorporate AGG into
your application. For example, Windows API PolyPolygon perfectly fits
these needs, except certain advanced things like gradient filling,
Gouraud shading, image transformations, and so on. Or, as an alternative,
you can use all AGG algorithms producing high resolution pixel images and
then to send the result to the printer as a pixel map.
Below is a typical brief scheme of the AGG rendering pipeline.
Please note that any component between the Vertex Source
and Screen Output is not mandatory. It all depends on your
particular needs. For example, you can use your own rasterizer,
based on Windows API. In this case you won't need the AGG rasterizer
and renderers. Or, if you need to draw only lines, you can use the
AGG outline rasterizer that has certain restrictions but works faster.
The number of possibilities is endless.
Vertex Source is some object that produces polygons or polylines as
a set of consecutive 2D vertices with commands like MoveTo, LineTo.
It can be a container or some other object that generates vertices
on demand.
Coordinate conversion pipeline consists of a number of coordinate
converters. It always works with vectorial data (X,Y) represented
as floating point numbers (double). For example, it can contain an
affine transformer, outline (stroke) generator, some marker
generator (like arrowheads/arrowtails), dashed lines generator,
and so on. The pipeline can have branches and you also can have
any number of different pipelines. You also can write your own
converter and include it into the pipeline.
Scanline Rasterizer converts vectorial data into a number of
horizontal scanlines. The scanlines usually (but not obligatory)
carry information about Anti-Aliasing as coverage values.
Renderers render scanlines, sorry for the tautology. The simplest
example is solid filling. The renderer just adds a color to the
scanline and writes the result into the rendering buffer.
More complex renderers can produce multi-color result,
like gradients, Gouraud shading, image transformations,
patterns, and so on. Rendering Buffer is a buffer in memory
that will be displayed afterwards. Usually but not obligatory
it contains pixels in format that fits your video system.
For example, 24 bits B-G-R, 32 bits B-G-R-A, or 15
bits R-G-B-555 for Windows. But in general, there're no
restrictions on pixel formats or color space if you write
your own low level class that supports that format.
Colors in AGG appear only in renderers, that is, when you
actually put some data to the rendering buffer. In general,
there's no general purpose structure or class like color,
instead, AGG always operates with concrete color space.
There are plenty of color spaces in the world, like RGB,
HSV, CMYK, etc., and all of them have certain restrictions.
For example, the RGB color space is just a poor subset of
colors that a human eye can recognize. If you look at the full
CIE Chromaticity Diagram, you will see that the RGB triangle
is just a little part of it.
In other words there are plenty of colors in the real world
that cannot be reproduced with RGB, CMYK, HSV, etc. Any color
space except the one existing in Nature is restrictive. Thus,
it was decided not to introduce such an object like color in
order not to restrict the possibilities in advance. Instead,
there are objects that operate with concrete color spaces.
Currently there are agg::rgba and agg::rgba8 that operate
with the most popular RGB color space (strictly speaking there's
RGB plus Alpha). The RGB color space is used with different
pixel formats, like 24-bit RGB or 32-bit RGBA with different
order of color components. But the common property of all of
them is that they are essentially RGB. Although, AGG doesn't
explicitly support any other color spaces, there is at least
a potential possibility of adding them. It means that all
class and function templates that depend on the color type
are parameterized with the ColorT argument.
Basically, AGG operates with coordinates of the output device.
On your screen there are pixels. But unlike many other libraries
and APIs AGG initially supports Subpixel Accuracy. It means
that the coordinates are represented as doubles, where fractional
values actually take effect. AGG doesn't have an embedded
conversion mechanism from world to screen coordinates in order
not to restrict your freedom. It's very important where and when
you do that conversion, so, different applications can require
different approaches. AGG just provides you a transformer of
that kind, namely, that can convert your own view port to the
device one. And it's your responsibility to include it into
the proper place of the pipeline. You can also write your
own very simple class that will allow you to operate with
millimeters, inches, or any other physical units.
Internally, the rasterizers use integer coordinates of the
format 24.8 bits, that is, 24 bits for the integer part and 8
bits for the fractional one. In other words, all the internal
coordinates are multiplied by 256. If you intend to use AGG in
some embedded system that has inefficient floating point
processing, you still can use the rasterizers with their
integer interfaces. Although, you won't be able to use the
floating point coordinate pipelines in this case.